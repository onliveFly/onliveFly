var utils = {};
let _this = this
let algorithm_change_support = false
try {
    importClass(com.tony.autojs.search.AlgorithmChanger)
    algorithm_change_support = true
} catch (e) {
    console.error('载入dex异常 当前不支持替换算法')
}
var height = device.height;
var width = device.width;
/**
 * pz*4rhqc
 * @param {*} way 可以是 text id desc className
 * @param {*} str 
 * @param {*} sleepTime 延迟时间 默认1秒 1001 点击按键中间
 * @returns 
 */
utils.clickNodeR = function (way, str, sleepTime, x漂移, y漂移) {
    if (!sleepTime) { sleepTime = 1000 }
    if (!x漂移) { x漂移 = 0 }
    if (!y漂移) { y漂移 = 0 }
    console.hide()
    sleep(sleepTime)
    let result = false //点击结果
    let object;
    if (way == "text") {
        object = textStartsWith(str).findOne(5000)
    } else if (way == "desc") {
        object = descStartsWith(str).findOne(5000)
    } else if (way == "id") {
        object = id(str).findOne(5000)
    } else if (way == "className") {
        object = className(str).findOne(5000)
    } else {
        log("Error:clickNode-way 参数不正确")
    }
    toastLog("开始--查询+点击：" + str)
    if (object != null) {
        try {
            var bool = object.clickable() ? object.click() : object.parent().clickable() ? object.parent().click() : object.parent().parent().clickable() ? object.parent().parent().click() : false
            if (bool && 1001 != sleepTime) {
                toastLog("按键点击")
                sleep(1500)
                result = true
            } else {
                let x = object.bounds().centerX()
                let y = object.bounds().centerY()
                log(x, y)
                if (x > 0 && y > 0) {
                    result = click(x + x漂移, y + y漂移)
                } else {
                    log(object)
                    log("Error:clickNodeR-中心坐标不在可视区")
                }
            }

        } catch (error) {
            toastLog("通用坐标点击错误:" + str)
        }
    } else {
        log("Error:clickNode-组件不存在/没找到")
    }
    console.show()
    sleep(sleepTime)
    return result
}

/**
 * 
 * @param {*} name 
 * @param {*} packageName 
 * @param {*} className 
 */
utils.快速打开 = function (name, packageName, className) {
    toastLog("启动" + name)
    sleep(1000)
    app.startActivity({
        action: "android.intent.action.VIEW",
        packageName: packageName,
        className: className
    });
    sleep(3000)
    //3秒内没打开就换一个打开方式
    if (packageName != currentPackage()) {
        launchApp(name)
    }
}

/**
 * 
 * @param {*} classNam 
 * @param {*} depth 
 * @param {*} str 
 * @returns 
 */
utils.closeT = function (classNam, depth, str) {
    let closeable = ""
    if (!str || str == 0) {
        toastLog("查询按键深度：" + depth)
        closeable = className(classNam).depth(depth).clickable().findOne(2500);
    } else {
        toastLog("查询按键：" + str)
        closeable = className(classNam).depth(depth).text(str).findOne(2500);
        if (closeable == null) {
            closeable = className(classNam).depth(depth).desc(str).findOne(2500);
        }
    }
    if (null != closeable) {
        toastLog("查询到点击：" + closeable.bounds().centerX() + " " + closeable.bounds().centerY())
        if (!closeable.click()) {
            click(closeable.bounds().centerX(), closeable.bounds().centerY())
        }
        sleep(500)
        return true;
    }
    return false;
}

utils.停止他人脚本 = function () {
    let currentEngine = engines.myEngine()
    let runningEngines = engines.all()
    let runningSize = runningEngines.length
    let currentSource = currentEngine.getSource() + ''
    if (runningSize > 1) {
        runningEngines.forEach(engine => {
            let compareEngine = engine
            let compareSource = compareEngine.getSource() + ''
            if (currentEngine.id !== compareEngine.id && compareSource === currentSource) {
                // 强制关闭同名的脚本
                compareEngine.forceStop()
            }
        })
        log("强制关闭同名的脚本")
    }

    engines.all().map((ScriptEngine) => {
        if (engines.myEngine().toString() !== ScriptEngine.toString()) {
            ScriptEngine.forceStop();
        }
    });
    //关闭其他脚本
    log("关闭其他脚本")
}

utils.清理缓存 = function () {
    // let currentActivityStr = currentPackage() //获取当前包
    back()
    sleep(1000)
    home()
    sleep(500)
    toastLog("清理按键是否返回成功：" + recents())
    clickNodeR("desc", "本机共有") ? "" : clickNodeR("id", "clearAnimView")
    sleep(1000)
    home()
    toastLog("等待5秒后操作~~ 防止进程没有被杀死")
    sleep(5000)
}

utils.listChoose = function (wChooseList, chooseList) {
    let option = dialogs.singleChoice("请选择", wChooseList);
    if (option == -1) {
        toastLog("脚本已退出");
        exit();
    }
    let whichOne = chooseList[option];
    return whichOne;
}

utils.scrollList = function (classNam, depthNum) {
    let 滑动按键 = null
    if (classNam && depthNum) {
        log(1)
        滑动按键 = className(classNam).scrollable(true).depth(depthNum).findOne(2000);
    } else if (classNam) {
        log(2)
        滑动按键 = className(classNam).scrollable(true).findOne(2000);
    } else if (depthNum) {
        滑动按键 = scrollable(true).depth(depthNum).findOne(2000);
    } else {
        log("查找一个可以滑动")
        滑动按键 = scrollable(true).findOne(2000);
    }
    if (滑动按键) {
        toastLog("滑动按键第：" + depthNum)
        滑动按键.scrollForward()
    } else {
        toastLog("固定参数滑动")
        swipe(width / 2, height / 5, width / 2, height * 4 / 5, 500);
    }
    sleep(2000)
}

utils.循环领取 = function (领取) {
    toastLog("领取按钮,循环")
    if (领取.findOnce()) {
        领取 = 领取.find(); sleep(2000);
        if (领取 != null) {
            toastLog("循环次数：" + 领取.length)
            领取.forEach(eachOne => {
                if (eachOne.text() != "") {
                    eachOne.click(); sleep(1500);
                }
            });
            toastLog("点击领取完毕");
        }
    }
    sleep(2000)
    //滑动到列表下面
    scrollList("android.view.View", 16)
    sleep(1000)
}



/**
 * 找图点击p坐标
 * @param {*} pic  图片
 * @param {*} threshold 阈值
 */
utils.findPicture = function (pic, threshold, str) {
    if (pic !== null) {
        pic = findImage(captureScreen(), pic, {
            region: [0, 50],
            threshold: threshold
        });
        if (pic) {
            click(Number(pic.x), Number(pic.y));
            toastLog("点击" + str + "坐标" + Number(pic.x), Number(pic.y));
            pic.recycle();//回收图片
        } else { toastLog(str + " 没有找到") }
    }
}

/**
 * 路径找图点击 需要加上图片一半高宽
 * @param {*} pic_点  图片点
 * @param {*} pic_post 阈值
 */
utils.findPathPic = function (path, threshold, str) {
    let pic = images.read(path);
    console.log("图片信息:" + pic)
    if (pic) {
        pic_post = findImage(captureScreen(), pic, {
            region: [0, 50],
            threshold: threshold
        });
        if (pic_post) {
            log(pic.toString())
            click(Number(pic_post.x + pic.width / 2), Number(pic_post.y + pic.height / 2));
            toastLog("点击" + str + "坐标" + Number(pic_post.x) + ' ' + Number(pic_post.y));
            pic.recycle();//回收图片
            return true
        } else {
            toastLog(str + " 没有找到")
        }
    }
    return false
}
/**
 * 判断按键是否存在 是就点击 点击成功等待2s 
 * @param {*} text_or_desc 
 * @param {*} str 
 */
utils.find_str = function (text_or_desc, str) {
    log("判断按键:" + str)
    if (text_or_desc == 'text') {
        if (text(str).findOnce()) {
            log('找到了:' + str)
            utils.clickNodeR("text", str)
            sleep(2000)
            return true
        } else {
            log(str)
            var string = textStartsWith(str).findOnce()
            if (string) {
                log('找到了:' + string)
                utils.clickNodeR("text", string.text())
                sleep(2000)
                return true
            }
        }
    } else if (text_or_desc == 'desc') {
        if (desc(str).findOnce()) {
            log('找到了:' + string)
            utils.clickNodeR("desc", str)
            sleep(2000)
            return true
        }
    }
    return false
}

/**
 * 
 * @param {*} color 找的颜色 #rrbbgg
 * @param {*} width 颜色位置
 * @param {*} height 颜色位置
 */
utils.find_color = function (color, x1, y1, x2, y2) {
    if (!x1) { x1 = 0 }
    if (!y1) { y1 = 0 }
    if (!x2) { x2 = device.width }
    if (!y2) { y2 = device.height }
    var point = findColor(captureScreen(), color, {
        region: [x1, y1, x2 - x1, y2 - y1],
        threshold: 4
    });
    if (point) {
        log("找到蓝色:" + point)//男
        log(click(Number(point.x), Number(point.y)))
    } else {
        log("没蓝色:" + point)//男
    }

}
/**
 * 传入颜色是不是和 对应点一样 是：点击返回true 否 返回false
 * @param {*} color 
 * @param {*} x1 
 * @param {*} y1 
 * @returns 
 */
utils.find_color_point = function (color, x1, y1) {
    var color_point = colors.toString(images.pixel(captureScreen(), x1, y1))
    if (colors.isSimilar(color, color_point, 4)) {
        log("坐标点颜色一样:" + color)//男
        log(click(Number(x1), Number(y1)))
        return true
    } else {
        log("坐标点颜色不一样,它是:" + color_point)//男
    }
    return false
}

/**
   * 根据内容获取一个对象
   * 
   * @param {string} contentVal 
   * @param {number} timeout 默认超时时间5秒
   * @param {boolean} containType 是否带回类型
   * @param {boolean} suspendWarning 是否隐藏warning信息
   * @param {function} appendFilter 附加查询条件 详见UiSelector
   */
utils.widgetGetOne = function (contentVal, timeout, containType, suspendWarning, appendFilter, options) {
    let target = null
    let isDesc = false
    let waitTime = timeout || 5000
    let timeoutFlag = true
    log(['try to find one: {} timeout: {}ms', contentVal.toString(), waitTime])
    let checkResult = utils.widgetCheck(contentVal, waitTime, true, appendFilter, options)
    if (!checkResult.timeout) {
        timeoutFlag = false
        target = checkResult.target
        isDesc = checkResult.isDesc
    }
    // 当需要带回类型时返回对象 传递target以及是否是desc
    if (target && containType) {
        let result = {
            target: target,
            bounds: target.bounds(),
            isDesc: isDesc,
            content: isDesc ? target.desc() : target.text()
        }
        return result
    }
    return target
}



/**
 * 替换控件搜索算法DFS,BFS,VDFS,VBFS,PDFS,PBFS,PVDFS,PVBFS
 * DFS,BFS为默认提供的深度优先和广度优先搜索算法
 * VDFS,VBFS为我修改的只搜索可见控件（控件包括父级不可见则直接跳过）深度优先和广度优先搜索算法 缺点是无法搜索不可见控件，适合一个界面中有巨量控件的时候用于加快搜索速度 实际数据抖音极速版从25s缩短到3s
 * PDFS,PBFS,PVDFS,PVBFS 是通过多线程搜索控件 大大加快搜索速度
 * 
 * @param {string} algorithm 搜索算法DFS,BFS,VDFS,VBFS,PDFS,PBFS,PVDFS,PVBFS
 * @param {UiSelector} mselector
 * @returns 
 */
utils.wrapSelector = function (algorithm, appendFilter, mselector) {
    appendFilter = appendFilter || function (matcher) { return matcher }
    mselector = appendFilter(mselector || selector())
    if (!algorithm) {
        return mselector
    }
    if (!algorithm_change_support) {
        log(['当前版本不支持替换搜索算法'])
        return mselector
    }
    current = this.getCurrentAlgorithm()
    if (current == algorithm) {
        return mselector
    }
    log(['替换搜索算法为：{} 原始算法：{}', algorithm, current])
    return AlgorithmChanger.changeAlgorithm(mselector, algorithm)
}

/**
   * 查找一个子控件中的目标对象
   * @param {UiObject} container 父控件
   * @param {String} contentVal 控件文本
   * @param {number} timeout 超时时间 默认5秒
   * @param {Boolean} containType 返回结果附带文本是desc还是text
   * @param {function} appendFilter 附加查询条件 详见UiSelector
   * @param {Object} options 额外参数
   * 超时返回false
   */
utils.subWidgetGetOne = function (container, contentVal, timeout, containType, appendFilter, options) {
    options = options || {}
    timeout = timeout || 5000
    let countDown = new java.util.concurrent.CountDownLatch(1)
    let matchRegex = new RegExp(contentVal)
    let isDesc = false
    let isText = false
    let target = null
    let descThread = threads.start(function () {
        let descTarget = utils.wrapSelector(options.algorithm, appendFilter).descMatches(matchRegex).findOneOf(container)
        if (descTarget) {
            log(['find desc {} {}', contentVal, descTarget.desc()])
            isDesc = true
            target = descTarget
            countDown.countDown()
        }
    })

    let textThread = threads.start(function () {
        let textTarget = utils.wrapSelector(options.algorithm, appendFilter).textMatches(matchRegex).findOneOf(container)
        if (textTarget) {
            log(['find text {} {}', contentVal, textTarget.text()])
            isText = true
            target = textTarget
            countDown.countDown()
        }
    })

    let isTimeout = false
    let timeoutThread = threads.start(function () {
        sleep(timeout)
        isTimeout = true
        countDown.countDown()
    })

    countDown.await()
    descThread.interrupt()
    textThread.interrupt()
    timeoutThread.interrupt()
    if (isTimeout || !isDesc && !isText) {
        log('cannot find any matches ' + contentVal)
    }
    if (target && containType) {
        return {
            isDesc: isDesc,
            target: target,
            bounds: target.bounds(),
            content: isDesc ? target.desc() : target.text()
        }
    }
    return target
}


/**
   * 查找一个子控件中的目标对象
   * @param {UiObject} container 父控件
   * @param {String} contentVal 控件id
   * @param {number} timeout 超时时间 默认5秒
   * @param {Boolean} containType 返回结果附带文本是desc还是text
   * @param {function} appendFilter 附加查询条件 详见UiSelector
   * @param {Object} options 额外参数
   * 超时返回false
   */
utils.subWidgetGetById = function (container, contentVal, timeout, containType, appendFilter, options) {
    options = options || {}
    timeout = timeout || 5000
    let countDown = new java.util.concurrent.CountDownLatch(1)
    let matchRegex = new RegExp(contentVal)
    let isDesc = false
    let isText = false
    let target = null
    let descThread = threads.start(function () {
        let descTarget = utils.wrapSelector(options.algorithm, appendFilter).id(matchRegex).findOneOf(container)
        if (descTarget) {
            log(['find id {} {}', contentVal, descTarget.desc()])
            isDesc = true
            target = descTarget
            countDown.countDown()
        }
    })

    let isTimeout = false
    let timeoutThread = threads.start(function () {
        sleep(timeout)
        isTimeout = true
        countDown.countDown()
    })

    countDown.await()
    descThread.interrupt()
    timeoutThread.interrupt()
    if (isTimeout || !isDesc && !isText) {
        log('cannot find any matches ' + contentVal)
    }
    if (target && containType) {
        return {
            isDesc: isDesc,
            target: target,
            bounds: target.bounds(),
            content: isDesc ? target.desc() : target.text()
        }
    }
    return target
}

/**
 * 校验控件是否存在，并打印相应日志
 * @param {String} idRegex 控件文本
 * @param {String} position 日志内容 当前所在位置是否成功进入
 * @param {Number} timeoutSetting 超时时间 默认为 5秒
 */
utils.idWaiting = function (idRegex, position, timeoutSetting, appendFilter, options) {
    options = options || {}
    let waitingSuccess = utils.idCheck(idRegex, timeoutSetting, false, appendFilter, options)
    position = position || idRegex
    if (waitingSuccess) {
        log('等待控件成功：' + position)
        return true
    } else {
        log('等待控件[' + position + ']失败， id：' + idRegex)
        return false
    }
}

/**
   * id检测
   * @param {string|RegExp} idRegex 
   * @param {number} timeoutSetting 
   */
utils.idCheck = function (idRegex, timeoutSetting, containType, appendFilter, options) {
    options = options || {}
    let timeout = timeoutSetting || 5000
    let timeoutFlag = true
    let countDown = new java.util.concurrent.CountDownLatch(1)
    let target = null
    let idCheckThread = threads.start(function () {
        target = utils.wrapSelector(options.algorithm, appendFilter).idMatches(idRegex).findOne()
        log('find id ' + idRegex)
        timeoutFlag = false
        countDown.countDown()
    })

    let timeoutThread = threads.start(function () {
        sleep(timeout)
        countDown.countDown()
    })
    countDown.await()
    idCheckThread.interrupt()
    timeoutThread.interrupt()
    if (timeoutFlag) {
        log(['未能找到id:{}对应的控件', idRegex])
    }
    if (containType) {
        return {
            timeout: timeoutFlag,
            target: target,
            bounds: target ? target.bounds() : null,
        }
    }
    return !timeoutFlag
}


/**
* 校验控件是否存在
* @param {String} contentVal 控件文本
* @param {Number} timeoutSetting 超时时间 单位毫秒 
* @param {Boolean} containType 返回结果附带文本是desc还是text
* @param {Object} options 额外参数
* 超时返回false
*/
utils.widgetCheck = function (contentVal, timeoutSetting, containType, appendFilter, options) {
    options = options || {}
    let timeout = timeoutSetting || 5000
    let timeoutFlag = true
    let countDown = new java.util.concurrent.CountDownLatch(1)
    let matchRegex = new RegExp(contentVal)
    let isDesc = false
    let target = null
    let descThread = threads.start(function () {
        target = utils.wrapSelector(options.algorithm, appendFilter).descMatches(matchRegex).findOne()
        let res = target.desc()
        log('find desc ' + contentVal + " " + res)
        timeoutFlag = false
        isDesc = true
        countDown.countDown()
    })

    let textThread = threads.start(function () {
        target = utils.wrapSelector(options.algorithm, appendFilter).textMatches(matchRegex).findOne()
        let res = target.text()
        log('find text ' + contentVal + "  " + res)
        timeoutFlag = false
        countDown.countDown()
    })

    let timeoutThread = threads.start(function () {
        sleep(timeout)
        countDown.countDown()
    })
    countDown.await()
    descThread.interrupt()
    textThread.interrupt()
    timeoutThread.interrupt()
    if (timeoutFlag) {
        log('cannot find any matches ' + contentVal + ' timeout:' + timeout)
    }
    if (containType) {
        return {
            timeout: timeoutFlag,
            target: target,
            bounds: target ? target.bounds() : null,
            isDesc: isDesc
        }
    }
    return !timeoutFlag
}

/**
* 校验控件是否存在，并打印相应日志
* @param {String} contentVal 控件文本
* @param {String} position 日志内容 当前所在位置是否成功进入
* @param {Number} timeoutSetting 超时时间 单位毫秒 默认为_config.timeout_existing
*/
utils.widgetWaiting = function (contentVal, position, timeoutSetting, appendFilter, options) {
    options = options || {}
    let waitingSuccess = utils.widgetCheck(contentVal, timeoutSetting, false, appendFilter, options)
    position = position || contentVal
    if (waitingSuccess) {
        log('等待控件成功：' + position)
        return true
    } else {
        log('等待控件[' + position + ']失败, 查找内容：' + contentVal)
        return false
    }
}

/**
 * 根据id获取控件信息
 * @param {String|RegExp} idRegex id
 * @param {number} timeout 超时时间
 * @return 返回找到的控件，否则null
 */
utils.widgetGetById = function (idRegex, timeout, appendFilter, options) {
    options = options || {}
    timeout = timeout || 5000
    let target = utils.idCheck(idRegex, timeout, true, appendFilter, options)
    if (!target.timeout) {
        return target.target
    } else {
        return null
    }
}
utils.isEmpty = function (val) {
    return val === null || typeof val === 'undefined' || val === ''
}

utils.isEmptyArray = function (array) {
    return array === null || typeof array === 'undefined' || array.length === 0
}

utils.isNotEmpty = function (val) {
    return !utils.isEmpty(val) && !utils.isEmptyArray(val)
}

utils.waitFor = function (action, timeout) {
    let countDown = new java.util.concurrent.CountDownLatch(1)
    let actionSuccess = false
    let actionThread = null
    let that = this
    try {
        let start = new Date().getTime()
        actionThread = threads.start(function () {
            try {
                action()
                actionSuccess = true
            } catch (e) {
                if (e.javaException instanceof com.stardust.autojs.runtime.exception.ScriptInterruptedException) {
                    return
                }
                warn('action执行异常' + e)
                that.printExceptionStack(e)
            } finally {
                countDown.countDown()
            }
            info(['action执行结束: {} 耗时：{}ms', actionSuccess, new Date().getTime() - start])
        })
        let waitResult = countDown.await(timeout, java.util.concurrent.TimeUnit.MILLISECONDS)
        log(['waitFor方法执行完毕，action result: {}, wait result: {} cost time: {}ms', actionSuccess, waitResult, new Date().getTime() - start])
        if (!waitResult) {
            info(['等待操作超时, 操作时间: {}ms', new Date().getTime() - start])
        }
    } catch (e) {
        this.printExceptionStack(e)
    } finally {
        if (actionThread !== null) {
            actionThread.interrupt()
        }
    }
    return actionSuccess
}

// let result = widgetUtils.alternativeWidget(/\s*今日签到\s*/, '.*明早7点可领.*', null, true)
// if (result.value === 1) {
/**
   * 判断控件A或者控件B是否存在；超时返回0 找到A返回1 否则返回2
   * 
   * @param {string|regex} contentA 控件A的内容
   * @param {string|regex} contentB 控件B的内容
   * @param {number} timeout 超时时间
   * @param {boolean} containContent 是否传递实际内容
   * @param {function} appendFilter 附加查询条件 详见UiSelector
   * @param {object} options 额外参数
   * @return 超时返回0 找到A返回1 否则返回2
   */
utils.alternativeWidget = function (contentA, contentB, timeout, containContent, appendFilter, options) {
    options = options || {}
    timeout = timeout || _config.timeout_existing
    let timeoutFlag = true
    let countDown = new java.util.concurrent.CountDownLatch(1)
    let matchRegexA = new RegExp(contentA)
    let matchRegexB = new RegExp(contentB)
    let isDesc = false, findA = false
    let res = null, target = null
    let descThreadA = threads.start(function () {
        target = _this.wrapSelector(options.algorithm, appendFilter).descMatches(matchRegexA).findOne()
        res = target.desc()
        info('find desc ' + contentA + " " + res)
        timeoutFlag = false
        isDesc = true
        findA = true
        countDown.countDown()
    })

    let textThreadA = threads.start(function () {
        target = _this.wrapSelector(options.algorithm, appendFilter).textMatches(matchRegexA).findOne()
        res = target.text()
        info('find text ' + contentA + "  " + res)
        timeoutFlag = false
        findA = true
        countDown.countDown()
    })
    let descThreadB = threads.start(function () {
        target = _this.wrapSelector(options.algorithm, appendFilter).descMatches(matchRegexB).findOne()
        res = target.desc()
        info('find desc ' + contentB + " " + res)
        timeoutFlag = false
        isDesc = true
        countDown.countDown()
    })

    let textThreadB = threads.start(function () {
        target = _this.wrapSelector(options.algorithm, appendFilter).textMatches(matchRegexB).findOne()
        res = target.text()
        info('find text ' + contentB + "  " + res)
        timeoutFlag = false
        countDown.countDown()
    })

    let timeoutThread = threads.start(function () {
        sleep(timeout)
        countDown.countDown()
    })
    countDown.await()
    descThreadA.interrupt()
    textThreadA.interrupt()
    descThreadB.interrupt()
    textThreadB.interrupt()
    timeoutThread.interrupt()
    if (timeoutFlag) {
        info(['cannot find any matches {} or {}', contentA, contentB])
    }
    // 超时返回0 找到A返回1 否则返回2
    let returnVal = timeoutFlag ? 0 : (findA ? 1 : 2)
    if (containContent) {
        return {
            target: target,
            bounds: target ? target.bounds() : null,
            content: res,
            value: returnVal
        }
    } else {
        return returnVal
    }
}

module.exports = utils;
